#!/usr/bin/python
"""
This program is one place that the data for all plots will be parsed, packed,
and prepared. The plots themselves are generated by R scripts under PlotScripts
directory.
"""

from numpy import *
from glob import glob
from optparse import OptionParser
from pprint import pprint
from functools import partial
from xml.dom import minidom
import math
import os
import subprocess
import random
import re
import sys
import warnings
sys.path.insert(0, os.environ['HOME'] + '/Research/RpcTransportDesign/OMNeT++Simulation/analysis')
from MetricsDashBoard import *

def roundLoadFactor(loadFactor):
    allLoads = [0.05, 0.1, 0.15, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8]
    loadDiff = [abs(i - loadFactor) for i in allLoads]
    minDiff = min(loadDiff)
    loadFacInd = [i for i,j in enumerate(loadDiff) if j == minDiff][0]
    return allLoads[loadFacInd]

def prepE2EStretchVsSizeAndUnsched(resultDir = ''):
    """
    Parses the stretch data and generates colomnized text data of stretch versus
    the Unsched bytes for homatransport.
    """

    f = open(os.environ['HOME'] + "/Research/RpcTransportDesign/OMNeT++Simulation/analysis/PlotScripts/stretchVsUnsched.txt", 'w')
    tw_h = 40
    tw_l = 15 
    f.write('LoadFactor'.center(tw_l) + 'WorkLoad'.center(tw_h) + 'MsgSizeRange'.center(tw_l) + 'SizeCntPercent'.center(tw_l) +
            'UnschedBytes'.center(tw_l) + 'MeanStretch'.center(tw_l) + 'MedianStretch'.center(tw_l) +
            '99PercentStretch'.center(tw_l) + '\n')
    for filename in glob(os.path.join(resultDir, '*.sca')):
        parsedStats = AttrDict()
        parsedStats.hosts, parsedStats.tors, parsedStats.aggrs, parsedStats.cores, parsedStats.generalInfo  = parse(open(filename))
        xmlConfigFile =  os.environ['HOME'] + '/Research/RpcTransportDesign/OMNeT++Simulation/homatransport/src/dcntopo/config.xml'
        xmlParsedDic = AttrDict()
        xmlParsedDic = parseXmlFile(xmlConfigFile)
        e2eStretchAndDelayDigest = AttrDict()
        e2eStretchAndDelay(parsedStats.hosts, parsedStats.generalInfo, xmlParsedDic, e2eStretchAndDelayDigest)
        if parsedStats.generalInfo.transportSchemeType != 'HomaTransport':
            continue
        loadFactor = float(parsedStats.generalInfo.loadFactor) * len(xmlParsedDic.senderIds)
        if (parsedStats.generalInfo.workloadType == 'FACEBOOK_KEY_VALUE'):
            loadFactor = loadFactor/0.75
        loadFactor = roundLoadFactor(loadFactor)
        workLoad = parsedStats.generalInfo.workloadType
        avgStretch = 0.0
        UnschedBytes = int(parsedStats.generalInfo.defaultReqBytes) + int(parsedStats.generalInfo.defaultUnschedBytes)
        for elem in e2eStretchAndDelayDigest.stretch:
            sizeUpBound = elem.sizeUpBound
            sizeProbability = elem.cntPercent
            meanStretch = float(elem.mean)
            medianStretch = float(elem.median)
            tailStretch = float(elem.ninety9Percentile)
            avgStretch += meanStretch * float(elem.cntPercent) / 100
            f.write('{0}'.format(loadFactor).center(tw_l) + '{0}'.format(workLoad).center(tw_h) + '{0}'.format(sizeUpBound).center(tw_l) +
                '{0}'.format(sizeProbability).center(tw_l) + '{0}'.format(UnschedBytes).center(tw_l) + '{0}'.format(meanStretch).center(tw_l) +
                '{0}'.format('NA').center(tw_l) + '{0}'.format('NA').center(tw_l) + '\n')
            f.write('{0}'.format(loadFactor).center(tw_l) + '{0}'.format(workLoad).center(tw_h) + '{0}'.format(sizeUpBound).center(tw_l) +
                '{0}'.format(sizeProbability).center(tw_l) + '{0}'.format(UnschedBytes).center(tw_l) + '{0}'.format('NA').center(tw_l) +
                '{0}'.format(medianStretch).center(tw_l) + '{0}'.format('NA').center(tw_l) + '\n')
            f.write('{0}'.format(loadFactor).center(tw_l) + '{0}'.format(workLoad).center(tw_h) + '{0}'.format(sizeUpBound).center(tw_l) +
                '{0}'.format(sizeProbability).center(tw_l) + '{0}'.format(UnschedBytes).center(tw_l) + '{0}'.format('NA').center(tw_l) +
                '{0}'.format('NA').center(tw_l) + '{0}'.format(tailStretch).center(tw_l) + '\n')
        f.write('{0}'.format(loadFactor).center(tw_l) + '{0}'.format(workLoad).center(tw_h) + '{0}'.format('OverAllSizes').center(tw_l) +
                '{0}'.format(1.00).center(tw_l) + '{0}'.format(UnschedBytes).center(tw_l) + '{0}'.format(avgStretch).center(tw_l)  + 
                '{0}'.format('NA').center(tw_l) + '{0}'.format('NA').center(tw_l) + '\n')
    f.close()

if __name__ == '__main__':
    parser = OptionParser(description='This scripts is inteded for parsing the simulation'
            ' result files, preparing the input files for plotting, and calling plotting'
            ' scripts.')
    parser.add_option('--resultDir', metavar='DIR',
            default = os.environ['HOME'] + '/Research/RpcTransportDesign/OMNeT++Simulation/homatransport/src/dcntopo/results',
            dest='resultDir',
            help='Directory containing result files')
    parser.add_option('--plotType', metavar='TYPE_OF_PLOT', default = '',
            dest='plotType',
            help='Mandatory argument. Types are: StretchVsUnsched')
    options, args = parser.parse_args()
    resultDir = options.resultDir 
    plotType = options.plotType 
    if plotType == '':
        sys.exit("--plotType is mandatory argument.")
    elif plotType == 'StretchVsUnsched':
        prepE2EStretchVsSizeAndUnsched(resultDir) 
        plotPath = os.environ['HOME'] + "/Research/RpcTransportDesign/OMNeT++Simulation/analysis/PlotScripts/"
        print subprocess.Popen('cd {0}; Rscript PlotStretchVsUnsched.r'.format(plotPath), shell=True, stdout=subprocess.PIPE).stdout.read()
    elif plotType == 'StretchVsSize':
        prepE2EStretchVsSizeAndUnsched(resultDir) 
        plotPath = os.environ['HOME'] + "/Research/RpcTransportDesign/OMNeT++Simulation/analysis/PlotScripts/"
        print subprocess.Popen('cd {0}; Rscript PlotStretchVsSize.r'.format(plotPath), shell=True, stdout=subprocess.PIPE).stdout.read()
